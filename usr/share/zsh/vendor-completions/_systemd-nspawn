#compdef systemd-nspawn

_nspawn-caps(){
    local -a _caps
    _caps=( CAP_CHOWN CAP_DAC_OVERRIDE CAP_DAC_READ_SEARCH
            CAP_FOWNER CAP_FSETID CAP_IPC_OWNER CAP_KILL CAP_LEASE CAP_LINUX_IMMUTABLE
            CAP_NET_BIND_SERVICE CAP_NET_BROADCAST CAP_NET_RAW CAP_SETGID CAP_SETFCAP CAP_SETPCAP
            CAP_SETUID CAP_SYS_ADMIN CAP_SYS_CHROOT CAP_SYS_NICE CAP_SYS_PTRACE CAP_SYS_TTY_CONFIG
            CAP_SYS_RESOURCE CAP_SYS_BOOT )
    _values -s , 'capabilities' "$_caps[@]"
}

_arguments \
    {-h,--help}'[Show this help]' \
    {--directory=,-D+}'[Directory to use as file system root for the namespace container. If omitted the current directory will be used.]:directories:_directories' \
    {--image=,-i+}'[Disk image to mount the root directory for the container from.]' \
    {--boot=,-b+}'[Automatically search for an init binary and invoke it instead of a shell or a user supplied program.]' \
    {--user=,-u+}'[Run the command under specified user, create home directory and cd into it.]' \
    {--machine=,-M+}'[Sets the machine name for this container.]' \
    '--uuid=[Set the specified uuid for the container.]' \
    '--slice=[Make the container part of the specified slice, instead of the default machine.slice.]' \
    '--private-network[Turn off networking in the container. This makes all network interfaces unavailable in the container, with the exception of the loopback device.]' \
    '--private-network[Disconnect networking of the container from the host.]' \
    '--network-interface=[Assign the specified network interface to the container.]' \
    '--network-macvlan=[Create a "macvlan" interface of the specified Ethernet network interface and add it to the container.]' \
    '--network-veth[Create a virtual Ethernet link (veth) between host and container.]' \
    '--network-bridge=[Adds the host side of the Ethernet link created with --network-veth to the specified bridge.]' \
    {--selinux-context=,-Z+}'[Sets the SELinux security context to be used to label processes in the container.]' \
    {--selinux-apifs-context=,-L+}'[Sets the SELinux security context to be used to label files in the virtual API file systems in the container.]' \
    '--capability=[List one or more additional capabilities to grant the container.]:capabilities:_nspawn-caps' \
    '--drop-capability=[Specify one or more additional capabilities to drop for the container]' \
    "--link-journal=[Control whether the container's journal shall be made visible to the host system.]:options:(no, host, guest, auto)" \
    '-j[Equivalent to --link-journal=guest.]' \
    '--read-only[Mount the root file system read only for the container.]' \
    '--bind=[Bind mount a file or directory from the host into the container.]' \
    '--bind-ro=[Bind mount a file or directory from the host into the container (read-only).]' \
    '--setenv=[Specifies an environment variable assignment to pass to the init process in the container, in the format "NAME=VALUE".]' \
    '--share-system[Allows the container to share certain system facilities with the host.]' \
    '--register=[Controls whether the container is registered with systemd-machined(8).]' \
    '--keep-unit[Instead of creating a transient scope unit to run the container in, simply register the service or scope unit systemd-nspawn has been invoked in with systemd-machined(8).]' \
    '--personality=[Control the architecture ("personality") reported by uname(2) in the container.]' \
    {--quiet,-q}'[Turns off any status output by the tool itself.]' \
    {--help,-h}'[Print a short help text and exit.]' \
    '--version[Print a short version string and exit.]'
