#!/bin/sh

# initramfs-tools header
case "${1}" in
	prereqs)
		# No prereqs
		exit 0
		;;
esac

# set variables
# size of the persistent partition in GB
second_partition_size=$((3*1024*1024*1024))

echo "Start extend_user_data now: $(date +"%T") since startup: $(cat /proc/uptime)" > ${rootmnt}/extend_user_data.log 
disk_letter=`ls -l /dev/disk/by-label | awk '$9 ~ /user_data/ {gsub(/[0-9]*$/,"",$11); gsub(/.*sd/,"",$11); print $11}'`>> ${rootmnt}/extend_user_data.log 2>&1; echo "ls EXIT ${?}" >> ${rootmnt}/extend_user_data.log
echo "$(parted --script /dev/sd${disk_letter} unit B print free)" >> ${rootmnt}/extend_user_data.log
echo "" >> ${rootmnt}/extend_user_data.log
echo "#lines with Free Space: $(parted --script /dev/sd${disk_letter} unit B print free | grep 'Free Space' | wc -l)" >> ${rootmnt}/extend_user_data.log
echo "" >> ${rootmnt}/extend_user_data.log
echo "$(ls -l ${rootmnt}/mnt/)" >> ${rootmnt}/extend_user_data.log
echo "" >> ${rootmnt}/extend_user_data.log
echo "$(df -h ${rootmnt}/mnt/)" >> ${rootmnt}/extend_user_data.log
echo "" >> ${rootmnt}/extend_user_data.log
echo "$(dumpe2fs -h /dev/sd${disk_letter}2)" >> ${rootmnt}/extend_user_data.log
echo "" >> ${rootmnt}/extend_user_data.log
echo "Disk sd${disk_letter}" >> extend_user_data.log
if [ ! -d "${rootmnt}/mnt" ]
then
	echo "ERROR: ${rootmnt}/mnt does not exist" >> extend_user_data.log
fi
# create the directory where the persistency partition will be mounted
mkdir --parents ${rootmnt}/mnt/persistent/ >> ${rootmnt}/extend_user_data.log 2>&1; echo "mkdir EXIT ${?}" >> ${rootmnt}/extend_user_data.log
# make sure all users (and applications) can write to the directory/partition
chmod 777 ${rootmnt}/mnt/persistent >> ${rootmnt}/extend_user_data.log 2>&1; echo "chmod EXIT ${?}" >> ${rootmnt}/extend_user_data.log
if [ $(parted --script /dev/sd${disk_letter} unit B print free | grep 'Free Space' | wc -l) -gt 1 ]
then
	# check size of second partition. We have to dop this second check because of USB devices greater than 4GB; 
	# they will have two Free Space entries in the parted print list (the second is the free space after the 
	# persistent partition). If the partition has been resized but not to the second_partition_size it will
	# be done to a size that filled the available free space and therefore the Free Space check will have failed.	
	if [ $(parted --script /dev/sd${disk_letter} unit B print | awk '$1 ~ /2/ {gsub(/.$/,"",$4); print $4}') -lt ${second_partition_size} ]
	then
		# extend the user_data partition by deleting the user_data partition
		# and creating a new one at the same start position
		# if partition is mounted umout
		#   TODO implement unmount, not needed for now
		# delete second parttion and create it again but now to fill all free space after the partition
		second_partition_start=`parted --script /dev/sd${disk_letter} unit B print | awk '$1 ~ /2/ {gsub(/.$/,"",$2); print $2}'`>> ${rootmnt}/extend_user_data.log 2>&1; echo "parted EXIT ${?}" >> ${rootmnt}/extend_user_data.log
		second_partition_end=$((${second_partition_start} + ${second_partition_size}))
		free_space_size=`parted --script /dev/sd${disk_letter} unit B print free | awk '$4 ~ /Free/ && FNR > 8 {gsub(/.$/,"",$3); print $3}'` >> ${rootmnt}/extend_user_data.log 2>&1; echo "parted EXIT ${?}" >> ${rootmnt}/extend_user_data.log
		echo "second_partition_size ${second_partition_size}" >> ${rootmnt}/extend_user_data.log
		echo "second_partition_start ${second_partition_start}" >> ${rootmnt}/extend_user_data.log
		echo "second_partition_end  ${second_partition_end}" >> ${rootmnt}/extend_user_data.log
		echo "free_space_size ${free_space_size}" >> ${rootmnt}/extend_user_data.log
		if [ ${second_partition_size} -gt ${free_space_size} ]
		then
			second_partition_size=${free_space_size}
			second_partition_end=$((${second_partition_start} + ${second_partition_size}))
			echo "second_partition_size ${second_partition_size}" >> ${rootmnt}/extend_user_data.log
			echo "second_partition_end  ${second_partition_end}" >> ${rootmnt}/extend_user_data.log
		fi
		parted --script /dev/sd${disk_letter} rm 2 >> ${rootmnt}/extend_user_data.log 2>&1; echo "parted EXIT ${?}" >> ${rootmnt}/extend_user_data.log
		parted --script /dev/sd${disk_letter} mkpart primary ${second_partition_start}B ${second_partition_end}B >> ${rootmnt}/extend_user_data.log 2>&1; echo "parted EXIT ${?}" >> ${rootmnt}/extend_user_data.log
		# check the filesystem
		e2fsck -pf /dev/sd${disk_letter}2 >> ${rootmnt}/extend_user_data.log 2>&1; echo "e2fsck EXIT ${?}" >> ${rootmnt}/extend_user_data.log  
		# resize the filesystem
		resize2fs -f /dev/sd${disk_letter}2 >> ${rootmnt}/extend_user_data.log 2>&1; echo "resize2fs EXIT ${?}" >> ${rootmnt}/extend_user_data.log 
	else	
		echo "No resize needed" >> ${rootmnt}/extend_user_data.log  
	fi
else
	e2fsck -pf /dev/sd${disk_letter}2 >> ${rootmnt}/extend_user_data.log 2>&1; echo "e2fsck EXIT ${?}" >> ${rootmnt}/extend_user_data.log  
fi
# mount the persistent partition as ext2 (same as type that was used to create the filesystem in the Makefile)
mount -t ext2 /dev/sd${disk_letter}2 ${rootmnt}/mnt/persistent/ >> ${rootmnt}/extend_user_data.log 2>&1; echo "mount EXIT ${?}" >> ${rootmnt}/extend_user_data.log
echo "$(ls -l ${rootmnt}/mnt/)" >> ${rootmnt}/extend_user_data.log
echo "" >> ${rootmnt}/extend_user_data.log
echo "$(df -h ${rootmnt}/mnt/)" >> ${rootmnt}/extend_user_data.log
echo "" >> ${rootmnt}/extend_user_data.log
echo "$(parted --script /dev/sd${disk_letter} unit B print free)" >> ${rootmnt}/extend_user_data.log
echo "" >> ${rootmnt}/extend_user_data.log
echo "$(dumpe2fs -h /dev/sd${disk_letter}2)" >> ${rootmnt}/extend_user_data.log
echo "End extend_user_data now: $(date +"%T") since startup: $(cat /proc/uptime)" >> ${rootmnt}/extend_user_data.log
